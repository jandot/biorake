require '../lib/biorake.rb'

DataMapper.setup(:default, 'sqlite3:sample.sqlite3')

class Probe
  include DataMapper::Resource
  
  property :id, Integer, :serial => true
  property :name, String
  property :avg, Float
  
  has n, :intensities
  has n, :individuals, :through => :intensities
end

class Individual
  include DataMapper::Resource
  
  property :id, Integer, :serial => true
  property :name, String
  
  has n, :intensities
  has n, :probes, :through => :intensities
end

class Intensity
  include DataMapper::Resource
  
  property :id, Integer, :serial => true
  property :probe_id, Integer
  property :individual_id, Integer
  property :value, Float
  
  belongs_to :probe
  belongs_to :individual
end

Probe.auto_migrate!
Individual.auto_migrate!
Intensity.auto_migrate!

task :default => [:calculate_averages]

desc 'Rebuild'
task :rebuild => [:erase_all, :calculate_averages] do
  STDERR.puts "Rebuilding the whole dataset..."
end

desc 'Erase all data'
task :erase_all do
  STDERR.puts "Deleting all information..."
  # Delete the data
  Intensity.all.destroy!
  Individual.all.destroy!
  Probe.all.destroy!
  
  # Delete the meta entries
  Meta.all.destroy!
end

desc 'Load probes from file'
data :load_probes => 'probes.txt' do
  STDERR.puts "Loading probes..."
  File.open('probes.txt').each do |line|
    probe_name = line.chomp
    Probe.new(:name => probe_name).save
  end
end

desc 'Load individuals from file'
data :load_individuals => 'individuals.txt' do
  STDERR.puts "Loading individuals..."
  File.open('individuals.txt').each do |line|
    ind_name = line.chomp
    Individual.new(:name => ind_name).save
  end
end

desc 'Load intensities from file'
data :load_intensities => ['intensities.txt', :load_probes, :load_individuals] do
  STDERR.puts "Loading intensities..."
  File.open('intensities.txt').each do |line|
    probe_name, ind_name, value = line.chomp.split(/\t/)
    probe = Probe.first(:name => probe_name)
    ind = Individual.first(:name => ind_name)
    Intensity.new(:probe_id => probe.id, :individual_id => ind.id, :value => value.to_f).save
  end
end

desc 'Calculate averages for probes'
data :calculate_averages => [:load_intensities] do
  STDERR.puts "Calculating averages..."
  Probe.all.each do |probe|
    sum = 0
    probe.intensities.each do |i|
      sum += i.value
    end
    probe.avg = sum.to_f/probe.intensities.length.to_f
    probe.save
  end
end
